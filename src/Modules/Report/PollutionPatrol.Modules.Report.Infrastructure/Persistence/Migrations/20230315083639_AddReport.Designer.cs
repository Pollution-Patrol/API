// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PollutionPatrol.Modules.Report.Infrastructure.Persistence;

#nullable disable

namespace PollutionPatrol.Modules.Report.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ReportDbContext))]
    [Migration("20230315083639_AddReport")]
    partial class AddReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PollutionPatrol.BuildingBlocks.Domain.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PollutionPatrol.Modules.Report.Domain.ReportAggregate.Report", b =>
                {
                    b.HasBaseType("PollutionPatrol.BuildingBlocks.Domain.Models.Entity");

                    b.Property<Guid?>("DesignatedReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("EvidenceFileKey")
                        .HasColumnType("text");

                    b.Property<Point>("LocationCoordinates")
                        .IsRequired()
                        .HasColumnType("geography(Point, 4326)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("LocationCoordinates");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("LocationCoordinates"), "gist");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("PollutionPatrol.Modules.Report.Domain.ReportAggregate.Report", b =>
                {
                    b.HasOne("PollutionPatrol.BuildingBlocks.Domain.Models.Entity", null)
                        .WithOne()
                        .HasForeignKey("PollutionPatrol.Modules.Report.Domain.ReportAggregate.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PollutionPatrol.Modules.Report.Domain.ReportAggregate.PollutionType", "PollutionType", b1 =>
                        {
                            b1.Property<Guid>("ReportId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PollutionType");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.OwnsOne("PollutionPatrol.Modules.Report.Domain.ReportAggregate.ReportStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("ReportId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Status");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("PollutionType")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
